
package japedidos.relatorios;

import com.github.lgooddatepicker.components.DatePickerSettings;
import japedidos.bd.BD;
import static japedidos.bd.BD.Cliente.TABLE;
import static japedidos.bd.BD.Pedido.parseView_pedido;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.knowm.xchart.*;
import org.knowm.xchart.XYSeries.XYSeriesRenderStyle;
import org.knowm.xchart.style.AxesChartStyler;
import org.knowm.xchart.style.Styler.LegendPosition;

/**
 *
 * @author v.gomes
 */
public class JFrame_Relatorios2 extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_relaorioIntercorrencia
     */
    public JFrame_Relatorios2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpnl_sideMenu = new javax.swing.JPanel();
        jtb_linhaBranca = new javax.swing.JToolBar();
        jlbl_clientes = new javax.swing.JLabel();
        jlbl_produtos = new javax.swing.JLabel();
        jlbl_pedidos = new javax.swing.JLabel();
        jlbl_relatorios = new javax.swing.JLabel();
        jpnl_img_etiqueta = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpnl_relatorioFinanceiro = new javax.swing.JPanel();
        jcmb_tipoRelatorioFinanceiro = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        DatePickerSettings dateSettings1 = new DatePickerSettings();
        dateSettings1.setFormatForDatesCommonEra("d MMM yyyy");
        dateSettings1.setFormatForDatesBeforeCommonEra("d MMM uuuu");
        dateSettings1.setAllowEmptyDates(false);
        dtp_fimFinanceiro = new com.github.lgooddatepicker.components.DatePicker(dateSettings1);
        DatePickerSettings dateSettings2 = new DatePickerSettings();
        dateSettings2.setFormatForDatesCommonEra("d MMM yyyy");
        dateSettings2.setFormatForDatesBeforeCommonEra("d MMM uuuu");
        dateSettings2.setAllowEmptyDates(false);
        dtp_inicioFinanceiro = new com.github.lgooddatepicker.components.DatePicker(dateSettings2);
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jbtn_gerarRelatorioFinanceiro = new javax.swing.JButton();
        jtbp_financeiro = new javax.swing.JTabbedPane();
        jscp_graficoFinanceiro = new javax.swing.JScrollPane();
        jpnl_graficoFinanceiro = new javax.swing.JPanel();
        jscp_tabelaFinanceiro = new javax.swing.JScrollPane();
        jtbl_fluxoFinanceiro = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jcmb_formato = new javax.swing.JComboBox<>();
        jpnl_relatorioPerfomanceGeral = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jcmb_tipoRelatorioPerformance = new javax.swing.JComboBox<>();
        DatePickerSettings dateSettings3 = new DatePickerSettings();
        dateSettings3.setFormatForDatesCommonEra("d MMM yyyy");
        dateSettings3.setFormatForDatesBeforeCommonEra("d MMM uuuu");
        dateSettings3.setAllowEmptyDates(false);
        dtp_fimPerformance = new com.github.lgooddatepicker.components.DatePicker(dateSettings3);
        DatePickerSettings dateSettings = new DatePickerSettings();
        dateSettings.setFormatForDatesCommonEra("d MMM yyyy");
        dateSettings.setFormatForDatesBeforeCommonEra("d MMM uuuu");
        dateSettings.setAllowEmptyDates(false);
        dtp_inicioPerformance = new com.github.lgooddatepicker.components.DatePicker(dateSettings);
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcmb_limitePerformance = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jbtn_gerarPerformance = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jcmb_formatoPerformance = new javax.swing.JComboBox<>();
        jtbp_performance = new javax.swing.JTabbedPane();
        jscp_graficoFinanceiro1 = new javax.swing.JScrollPane();
        jpnl_graficoPerformance = new javax.swing.JPanel();
        jscp_tabelaPerformance = new javax.swing.JScrollPane();
        jtbl_fluxoPerformance = new javax.swing.JTable();
        jpnl_relatorioIntercorrencia = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbl_relatorioIntercorrencia = new javax.swing.JTable();
        jlbl_filtroPeridoIntercorrencia = new javax.swing.JLabel();
        jtxtf_periodoInicialIntercorrencia = new javax.swing.JTextField();
        jtxtf_periodoFinalIntercorrencia = new javax.swing.JTextField();
        jlbl_filtroPeridoIntercorrenciaAte = new javax.swing.JLabel();
        jbtn_pesquisarFiltroIntercorrencia = new javax.swing.JButton();
        jpnl_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 576));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 576));

        jPanel1.setMaximumSize(new java.awt.Dimension(1024, 576));
        jPanel1.setMinimumSize(new java.awt.Dimension(1024, 576));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 576));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpnl_sideMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpnl_sideMenu.setMaximumSize(new java.awt.Dimension(250, 576));
        jpnl_sideMenu.setMinimumSize(new java.awt.Dimension(250, 576));
        jpnl_sideMenu.setPreferredSize(new java.awt.Dimension(250, 576));
        jpnl_sideMenu.setOpaque(false);
        jpnl_sideMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtb_linhaBranca.setBackground(new java.awt.Color(255, 255, 255));
        jtb_linhaBranca.setBorder(null);
        jtb_linhaBranca.setForeground(new java.awt.Color(255, 255, 255));
        jtb_linhaBranca.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jtb_linhaBranca.setBorderPainted(false);
        jpnl_sideMenu.add(jtb_linhaBranca, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 360, 114, 4));

        jlbl_clientes.setBackground(new java.awt.Color(0, 0, 0));
        jlbl_clientes.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jlbl_clientes.setText("CLIENTES");
        jpnl_sideMenu.add(jlbl_clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 210, -1, -1));

        jlbl_produtos.setBackground(new java.awt.Color(0, 0, 0));
        jlbl_produtos.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jlbl_produtos.setForeground(new java.awt.Color(204, 204, 204));
        jlbl_produtos.setText("PRODUTOS");
        jlbl_produtos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jlbl_produtosFocusGained(evt);
            }
        });
        jpnl_sideMenu.add(jlbl_produtos, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 250, -1, -1));

        jlbl_pedidos.setBackground(new java.awt.Color(0, 0, 0));
        jlbl_pedidos.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jlbl_pedidos.setText("PEDIDOS");
        jpnl_sideMenu.add(jlbl_pedidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 290, -1, -1));

        jlbl_relatorios.setBackground(new java.awt.Color(0, 0, 0));
        jlbl_relatorios.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        jlbl_relatorios.setText("RELATÓRIOS");
        jpnl_sideMenu.add(jlbl_relatorios, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 330, -1, -1));

        jpnl_img_etiqueta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/painel_comandos_esquerda_05x.png"))); // NOI18N
        jpnl_img_etiqueta.setText("jLabel2");
        jpnl_img_etiqueta.setMaximumSize(new java.awt.Dimension(250, 576));
        jpnl_img_etiqueta.setMinimumSize(new java.awt.Dimension(250, 576));
        jpnl_sideMenu.add(jpnl_img_etiqueta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 250, -1));

        jPanel1.add(jpnl_sideMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 576));

        jpnl_relatorioFinanceiro.setOpaque(false);
        jpnl_relatorioFinanceiro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jcmb_tipoRelatorioFinanceiro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fluxo Diário", "Fluxo Semanal", "Fluxo Mensal", "Fluxo Anual", "Fluxo Agregado" }));
        jcmb_tipoRelatorioFinanceiro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmb_tipoRelatorioFinanceiroItemStateChanged(evt);
            }
        });
        jpnl_relatorioFinanceiro.add(jcmb_tipoRelatorioFinanceiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        jLabel1.setText("Tipo");
        jpnl_relatorioFinanceiro.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, -1));

        dtp_fimFinanceiro.getComponentDateTextField().setPreferredSize(new java.awt.Dimension(80, 20));

        dateSettings1.setVisiblePreviousYearButton(false);
        dateSettings1.setVisibleNextYearButton(false);
        dtp_fimFinanceiro.setDateToToday();
        dateSettings1.setDateRangeLimits(null, LocalDate.now());

        javax.swing.JButton datePickerButton1 = dtp_fimFinanceiro.getComponentToggleCalendarButton();
        datePickerButton1.setPreferredSize(new java.awt.Dimension(22, 22));
        datePickerButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        datePickerButton1.setOpaque(false);
        datePickerButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        datePickerButton1.setBackground(new java.awt.Color(0, 0, 0, 0));
        datePickerButton1.setText("");
        javax.swing.ImageIcon dateExampleIcon1 = new javax.swing.ImageIcon(getClass().getResource("/datepickerbutton1.png"));
        datePickerButton1.setIcon(dateExampleIcon1);
        java.awt.Dimension newDateButtonSize1 = new java.awt.Dimension(dateExampleIcon1.getIconWidth() + 4, dateExampleIcon1.getIconHeight() + 4);
        datePickerButton1.setPreferredSize(newDateButtonSize1);

        datePickerButton1.setContentAreaFilled(false);
        datePickerButton1.setBorderPainted(false);
        datePickerButton1.setFocusPainted(false);
        dtp_fimFinanceiro.setBackground(new java.awt.Color(0,0,0,0));
        jpnl_relatorioFinanceiro.add(dtp_fimFinanceiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 120, 30));

        dtp_inicioFinanceiro.getComponentDateTextField().setPreferredSize(new java.awt.Dimension(80, 20));
        dtp_inicioFinanceiro.setDateToToday();

        dateSettings2.setDateRangeLimits(null, LocalDate.now());

        javax.swing.JButton datePickerButton2 = dtp_inicioFinanceiro.getComponentToggleCalendarButton();
        datePickerButton2.setPreferredSize(new java.awt.Dimension(22, 22));
        datePickerButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        datePickerButton2.setOpaque(false);
        datePickerButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        datePickerButton2.setBackground(new java.awt.Color(0, 0, 0, 0));
        datePickerButton2.setText("");
        javax.swing.ImageIcon dateExampleIcon2 = new javax.swing.ImageIcon(getClass().getResource("/datepickerbutton1.png"));
        datePickerButton2.setIcon(dateExampleIcon2);
        java.awt.Dimension newDateButtonSize2 = new java.awt.Dimension(dateExampleIcon2.getIconWidth() + 4, dateExampleIcon2.getIconHeight() + 4);
        datePickerButton2.setPreferredSize(newDateButtonSize2);

        datePickerButton2.setContentAreaFilled(false);
        datePickerButton2.setBorderPainted(false);
        datePickerButton2.setFocusPainted(false);
        dtp_inicioFinanceiro.setBackground(new java.awt.Color(0,0,0,0));
        jpnl_relatorioFinanceiro.add(dtp_inicioFinanceiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 120, 30));

        jLabel4.setText("Fim:");
        jpnl_relatorioFinanceiro.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jLabel5.setText("Início:");
        jpnl_relatorioFinanceiro.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jbtn_gerarRelatorioFinanceiro.setText("Gerar relatório");
        jbtn_gerarRelatorioFinanceiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_gerarRelatorioFinanceiroActionPerformed(evt);
            }
        });
        jpnl_relatorioFinanceiro.add(jbtn_gerarRelatorioFinanceiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, 130, 30));

        jpnl_graficoFinanceiro.setMinimumSize(new java.awt.Dimension(694, 304));
        jpnl_graficoFinanceiro.setLayout(new java.awt.GridBagLayout());
        jscp_graficoFinanceiro.setViewportView(jpnl_graficoFinanceiro);

        jtbp_financeiro.addTab("Gráfico", jscp_graficoFinanceiro);

        jtbl_fluxoFinanceiro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data associada", "Arrecadado", "Custo", "Lucro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbl_fluxoFinanceiro.getTableHeader().setReorderingAllowed(false);
        jscp_tabelaFinanceiro.setViewportView(jtbl_fluxoFinanceiro);
        if (jtbl_fluxoFinanceiro.getColumnModel().getColumnCount() > 0) {
            jtbl_fluxoFinanceiro.getColumnModel().getColumn(0).setHeaderValue("Data associada");
            jtbl_fluxoFinanceiro.getColumnModel().getColumn(1).setHeaderValue("Arrecadado");
            jtbl_fluxoFinanceiro.getColumnModel().getColumn(2).setHeaderValue("Custo");
            jtbl_fluxoFinanceiro.getColumnModel().getColumn(3).setHeaderValue("Lucro");
        }

        jtbp_financeiro.addTab("Tabela", jscp_tabelaFinanceiro);

        jpnl_relatorioFinanceiro.add(jtbp_financeiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 720, 390));

        jLabel6.setText("Formato:");
        jpnl_relatorioFinanceiro.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        jcmb_formato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gráfico", "Tabela" }));
        jcmb_formato.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmb_formatoItemStateChanged(evt);
            }
        });
        jpnl_relatorioFinanceiro.add(jcmb_formato, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 120, 30));

        jTabbedPane1.addTab("FINANCEIRO", jpnl_relatorioFinanceiro);

        jpnl_relatorioPerfomanceGeral.setOpaque(false);
        jpnl_relatorioPerfomanceGeral.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Tipo:");
        jpnl_relatorioPerfomanceGeral.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jcmb_tipoRelatorioPerformance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Produtos", "Pedidos", "Atendentes" }));
        jpnl_relatorioPerfomanceGeral.add(jcmb_tipoRelatorioPerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        dtp_fimPerformance.getComponentDateTextField().setPreferredSize(new java.awt.Dimension(80, 20));

        dateSettings3.setVisiblePreviousYearButton(false);
        dateSettings3.setVisibleNextYearButton(false);
        dateSettings3.setDateRangeLimits(null, LocalDate.now());

        dtp_fimPerformance.setDateToToday();

        javax.swing.JButton datePickerButton3 = dtp_fimPerformance.getComponentToggleCalendarButton();
        datePickerButton3.setPreferredSize(new java.awt.Dimension(22, 22));
        datePickerButton3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        datePickerButton3.setOpaque(false);
        datePickerButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        datePickerButton3.setBackground(new java.awt.Color(0, 0, 0, 0));
        datePickerButton3.setText("");
        javax.swing.ImageIcon dateExampleIcon3 = new javax.swing.ImageIcon(getClass().getResource("/datepickerbutton1.png"));
        datePickerButton3.setIcon(dateExampleIcon3);
        java.awt.Dimension newDateButtonSize3 = new java.awt.Dimension(dateExampleIcon3.getIconWidth() + 4, dateExampleIcon3.getIconHeight() + 4);
        datePickerButton3.setPreferredSize(newDateButtonSize3);

        datePickerButton3.setContentAreaFilled(false);
        datePickerButton3.setBorderPainted(false);
        datePickerButton3.setFocusPainted(false);
        dtp_fimPerformance.setBackground(new java.awt.Color(0,0,0,0));
        jpnl_relatorioPerfomanceGeral.add(dtp_fimPerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 120, 30));

        dtp_inicioPerformance.getComponentDateTextField().setPreferredSize(new java.awt.Dimension(80, 20));
        dtp_inicioPerformance.setDateToToday();

        javax.swing.JButton datePickerButton4 = dtp_inicioPerformance.getComponentToggleCalendarButton();
        datePickerButton4.setPreferredSize(new java.awt.Dimension(22, 22));
        datePickerButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        datePickerButton4.setOpaque(false);
        datePickerButton4.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        datePickerButton4.setBackground(new java.awt.Color(0, 0, 0, 0));
        datePickerButton4.setText("");
        javax.swing.ImageIcon dateExampleIcon = new javax.swing.ImageIcon(getClass().getResource("/datepickerbutton1.png"));
        datePickerButton4.setIcon(dateExampleIcon);
        java.awt.Dimension newDateButtonSize = new java.awt.Dimension(dateExampleIcon.getIconWidth() + 4, dateExampleIcon.getIconHeight() + 4);
        datePickerButton4.setPreferredSize(newDateButtonSize);

        datePickerButton4.setContentAreaFilled(false);
        datePickerButton4.setBorderPainted(false);
        datePickerButton4.setFocusPainted(false);
        dtp_inicioPerformance.setBackground(new java.awt.Color(0,0,0,0));
        jpnl_relatorioPerfomanceGeral.add(dtp_inicioPerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 120, 30));

        jLabel7.setText("Início:");
        jpnl_relatorioPerfomanceGeral.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        jLabel8.setText("Fim:");
        jpnl_relatorioPerfomanceGeral.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jcmb_limitePerformance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "15", "25" }));
        jpnl_relatorioPerfomanceGeral.add(jcmb_limitePerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 50, 30));

        jLabel3.setText("Limite");
        jpnl_relatorioPerfomanceGeral.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, -1, -1));

        jbtn_gerarPerformance.setText("Gerar relatório");
        jbtn_gerarPerformance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_gerarPerformanceActionPerformed(evt);
            }
        });
        jpnl_relatorioPerfomanceGeral.add(jbtn_gerarPerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 30, 120, 30));

        jLabel9.setText("Formato:");
        jpnl_relatorioPerfomanceGeral.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 10, -1, -1));

        jcmb_formatoPerformance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gráfico", "Tabela" }));
        jpnl_relatorioPerfomanceGeral.add(jcmb_formatoPerformance, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, 90, 30));

        jpnl_graficoPerformance.setMinimumSize(new java.awt.Dimension(694, 304));
        jpnl_graficoPerformance.setLayout(new java.awt.GridBagLayout());
        jscp_graficoFinanceiro1.setViewportView(jpnl_graficoPerformance);

        jtbp_performance.addTab("Gráfico", jscp_graficoFinanceiro1);

        jtbl_fluxoPerformance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data associada", "Arrecadado", "Custo", "Lucro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbl_fluxoPerformance.getTableHeader().setReorderingAllowed(false);
        jscp_tabelaPerformance.setViewportView(jtbl_fluxoPerformance);
        if (jtbl_fluxoPerformance.getColumnModel().getColumnCount() > 0) {
            jtbl_fluxoPerformance.getColumnModel().getColumn(0).setHeaderValue("Data associada");
            jtbl_fluxoPerformance.getColumnModel().getColumn(1).setHeaderValue("Arrecadado");
            jtbl_fluxoPerformance.getColumnModel().getColumn(2).setHeaderValue("Custo");
            jtbl_fluxoPerformance.getColumnModel().getColumn(3).setHeaderValue("Lucro");
        }

        jtbp_performance.addTab("Tabela", jscp_tabelaPerformance);

        jpnl_relatorioPerfomanceGeral.add(jtbp_performance, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 720, 390));

        jTabbedPane1.addTab("PERFORMANCE GERAL", jpnl_relatorioPerfomanceGeral);

        jpnl_relatorioIntercorrencia.setOpaque(false);
        jpnl_relatorioIntercorrencia.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtbl_relatorioIntercorrencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"ATRASO NA ENTREGA", null, null},
                {"PEDIDO VEIO FALTANDO", null, null},
                {"CLIENTE NÃO ESTAVA NO LOCAL", null, null},
                {"PACOTE FURTADO", null, null},
                {"PROBLEMA NO VEÍCULO DE ENTREGA", null, null},
                {"FORÇAS MAIORES", null, null},
                {"PRODUTO EM FALTA", null, null},
                {"CLIENTE NÃO PAGOU", null, null},
                {"PROBLEMA PRCESSUAL", null, null},
                {"PROBLEMA TÉCNICO", null, null},
                {"MOTOBOY NÃO APARECEU", null, null},
                {"OUTROS", null, null}
            },
            new String [] {
                "INTERCORRÊNCIA RELATADA", "REINCIDÊNIA/QUANTIDADE", "GRAFICO DE PERDA GERAL"
            }
        ));
        jScrollPane3.setViewportView(jtbl_relatorioIntercorrencia);

        jpnl_relatorioIntercorrencia.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 720, 280));

        jlbl_filtroPeridoIntercorrencia.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlbl_filtroPeridoIntercorrencia.setText("FILTRAR PERÍODO:");
        jpnl_relatorioIntercorrencia.add(jlbl_filtroPeridoIntercorrencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jtxtf_periodoInicialIntercorrencia.setText("01/10/2024");
        jtxtf_periodoInicialIntercorrencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtf_periodoInicialIntercorrenciaActionPerformed(evt);
            }
        });
        jpnl_relatorioIntercorrencia.add(jtxtf_periodoInicialIntercorrencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 90, 30));

        jtxtf_periodoFinalIntercorrencia.setText("31/10/2024");
        jpnl_relatorioIntercorrencia.add(jtxtf_periodoFinalIntercorrencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 90, 30));

        jlbl_filtroPeridoIntercorrenciaAte.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlbl_filtroPeridoIntercorrenciaAte.setText(" -");
        jpnl_relatorioIntercorrencia.add(jlbl_filtroPeridoIntercorrenciaAte, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 20, -1));

        jbtn_pesquisarFiltroIntercorrencia.setText("PESQUISAR");
        jpnl_relatorioIntercorrencia.add(jbtn_pesquisarFiltroIntercorrencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 110, 30));

        jTabbedPane1.addTab("INTERCORRÊNCIA", jpnl_relatorioIntercorrencia);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 750, 490));

        jpnl_background.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jpnl_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background_produtos.png"))); // NOI18N
        jpnl_background.setToolTipText("");
        jpnl_background.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jpnl_background.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jpnl_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jlbl_produtosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jlbl_produtosFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jlbl_produtosFocusGained

    private void jtxtf_periodoInicialIntercorrenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtf_periodoInicialIntercorrenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtf_periodoInicialIntercorrenciaActionPerformed

    private static class Maximizador extends MouseAdapter {
        public JPanel painel;
        
        public Maximizador(JPanel root) {
            super();
            this.painel = root;
        }
        
        @Override
            public void mouseClicked(MouseEvent e) {
                JFrame maximizado = new JFrame("Maximizado");
                maximizado.setContentPane(this.painel);
                maximizado.pack();
                maximizado.setVisible(true);
            }
    }
    
    private void jbtn_gerarRelatorioFinanceiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_gerarRelatorioFinanceiroActionPerformed
        jpnl_graficoFinanceiro.removeAll();
        int escolha = jcmb_tipoRelatorioFinanceiro.getSelectedIndex();
        jtbp_financeiro.setSelectedIndex(jcmb_formato.getSelectedIndex());
        switch (escolha) {
            case 0 -> {
                LocalDate dtInicio = dtp_inicioFinanceiro.getDate();
                LocalDate dtFim = dtp_fimFinanceiro.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                ArrayList<Date> datas = new ArrayList<>();
                ArrayList<Double> arrecadado = new ArrayList<>();
                ArrayList<Double> lucro = new ArrayList<>();
                ArrayList<Double> custo = new ArrayList<>();
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call fluxo_caixa_diario(?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtFim));
                    cstmt.setDate(2, Date.valueOf(dtInicio));
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        datas.add(rs.getDate("dt_associada"));
//                        System.out.println(rs.getDate("dt_associada"));
                        arrecadado.add(rs.getDouble("arrecadado"));
//                        System.out.println(rs.getDate("arrecadado"));
                        custo.add(rs.getDouble("custo"));
//                        System.out.println(rs.getDate("custo"));
                        lucro.add(rs.getDouble("lucro"));
//                        System.out.println(rs.getDate("lucro"));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }
                

                    if (jcmb_formato.getSelectedIndex() == 0) {
                        if (datas.size() > 0) {
                            XYChart xyChart = new XYChartBuilder().width(694).height(340).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
                            xyChart.getStyler().setLegendPosition(LegendPosition.OutsideE);
                            xyChart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Line);
                            xyChart.getStyler().setLegendVisible(true);
                            xyChart.getStyler().setPlotContentSize(0.8);
                            xyChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
                            xyChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");

                            double[] lucros = new double[] {1};
            //                xyChart.addSeries("Arrecadamento", );
            //                xyChart.addSeries("Custo", );
                            xyChart.addSeries("Arrecadamento", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(arrecadado.toArray(new Double[1])));
                            xyChart.addSeries("Custo", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(custo.toArray(new Double[1])));
                            xyChart.addSeries("Lucro", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(lucro.toArray(new Double[1])));

                            XChartPanel panel = new XChartPanel(xyChart);

                            jpnl_graficoFinanceiro.add(panel);
                            jpnl_graficoFinanceiro.add(panel);
                            panel.addMouseListener(new Maximizador(panel));
                            panel.setVisible(true);
                        }
                    } else {
                        jtbl_fluxoFinanceiro.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Data associada", "Arrecadado", "Custo", "Lucro"
                            }
                            ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });
                        for (int i = 0 ; i < datas.size(); i++) {
                            ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).addRow(new Object[] {datas.get(i), arrecadado.get(i), custo.get(i), lucro.get(i)});
                        }
                        ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).fireTableDataChanged();
                    }
            }
            case 1 -> {
                LocalDate dtInicio = dtp_inicioFinanceiro.getDate();
                LocalDate dtFim = dtp_fimFinanceiro.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                ArrayList<Date> datas = new ArrayList<>();
                ArrayList<Date> datasFimSemana = new ArrayList<>();
                ArrayList<Double> arrecadado = new ArrayList<>();
                ArrayList<Double> lucro = new ArrayList<>();
                ArrayList<Double> custo = new ArrayList<>();
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call fluxo_caixa_semanal(?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtFim));
                    cstmt.setDate(2, Date.valueOf(dtInicio));
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        datas.add(rs.getDate("dt_inicio_semana"));
                        datasFimSemana.add(rs.getDate("dt_limite_semana"));
//                        System.out.println(rs.getDate("dt_associada"));
                        arrecadado.add(rs.getDouble("arrecadado"));
//                        System.out.println(rs.getDate("arrecadado"));
                        custo.add(rs.getDouble("custo"));
//                        System.out.println(rs.getDate("custo"));
                        lucro.add(rs.getDouble("lucro"));
//                        System.out.println(rs.getDate("lucro"));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }

                    
                    if (jcmb_formato.getSelectedIndex() == 0) {
                        if (datas.size() > 0) {
                            XYChart xyChart = new XYChartBuilder().width(694).height(340).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
                            xyChart.getStyler().setLegendPosition(LegendPosition.OutsideE);
                            xyChart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Line);
                            xyChart.getStyler().setLegendVisible(true);
                            xyChart.getStyler().setPlotContentSize(0.8);
                            xyChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
                            xyChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");

                            double[] lucros = new double[] {1};
            //                xyChart.addSeries("Arrecadamento", );
            //                xyChart.addSeries("Custo", );
                            xyChart.addSeries("Arrecadamento", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(arrecadado.toArray(new Double[1])));
                            xyChart.addSeries("Custo", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(custo.toArray(new Double[1])));
                            xyChart.addSeries("Lucro", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(lucro.toArray(new Double[1])));

                            XChartPanel panel = new XChartPanel(xyChart);

                            jpnl_graficoFinanceiro.add(panel);
                            panel.addMouseListener(new Maximizador(panel));
                            panel.setVisible(true);
                        }
                    } else {
                        //Semanal
                        jtbl_fluxoFinanceiro.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Início da Semana", "Fim da Semana", "Arrecadado", "Custo", "Lucro"
                            }
                            ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });

                        for (int i = 0 ; i < datas.size(); i++) {
                            ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).addRow(new Object[] {datas.get(i), datasFimSemana.get(i), arrecadado.get(i), custo.get(i), lucro.get(i)});
                        }
                        ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).fireTableDataChanged();
                    }
                    

            }
            case 2 -> {
                LocalDate dtInicio = dtp_inicioFinanceiro.getDate();
                LocalDate dtFim = dtp_fimFinanceiro.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                ArrayList<Date> datas = new ArrayList<>();
                ArrayList<Date> datasFimMes = new ArrayList<>();
                ArrayList<Integer> mes = new ArrayList<>();
                ArrayList<Double> arrecadado = new ArrayList<>();
                ArrayList<Double> lucro = new ArrayList<>();
                ArrayList<Double> custo = new ArrayList<>();
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call fluxo_caixa_mensal(?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtFim));
                    cstmt.setDate(2, Date.valueOf(dtInicio));
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        datas.add(rs.getDate("dt_inicio_mes"));
                        datasFimMes.add(rs.getDate("dt_limite_mes"));
                        mes.add(rs.getInt("mes"));
//                        System.out.println(rs.getDate("dt_associada"));
                        arrecadado.add(rs.getDouble("arrecadado"));
//                        System.out.println(rs.getDate("arrecadado"));
                        custo.add(rs.getDouble("custo"));
//                        System.out.println(rs.getDate("custo"));
                        lucro.add(rs.getDouble("lucro"));
//                        System.out.println(rs.getDate("lucro"));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }

                    if (jcmb_formato.getSelectedIndex() == 0) {
                        if (datas.size() > 0) {
                            XYChart xyChart = new XYChartBuilder().width(694).height(340).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
                            xyChart.getStyler().setLegendPosition(LegendPosition.OutsideE);
                            xyChart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Line);
                            xyChart.getStyler().setLegendVisible(true);
                            xyChart.getStyler().setPlotContentSize(0.8);
                            xyChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
                            xyChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");

                            double[] lucros = new double[] {1};
            //                xyChart.addSeries("Arrecadamento", );
            //                xyChart.addSeries("Custo", );
                            xyChart.addSeries("Arrecadamento", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(arrecadado.toArray(new Double[1])));
                            xyChart.addSeries("Custo", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(custo.toArray(new Double[1])));
                            xyChart.addSeries("Lucro", Arrays.asList(datas.toArray(new Date[1])), Arrays.asList(lucro.toArray(new Double[1])));

                            XChartPanel panel = new XChartPanel(xyChart);

                            jpnl_graficoFinanceiro.add(panel);
                            panel.addMouseListener(new Maximizador(panel));
                            panel.setVisible(true);
                        }
                    } else {
                        //Mensal
                        jtbl_fluxoFinanceiro.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Início do mês", "Fim do mês", "Mês", "Arrecadado", "Custo", "Lucro"
                            }
                            ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });

                        for (int i = 0 ; i < datas.size(); i++) {
                            ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).addRow(new Object[] {datas.get(i), datasFimMes.get(i), mes.get(i),arrecadado.get(i), custo.get(i), lucro.get(i)});
                        }
                        ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).fireTableDataChanged();
                    }

            }
            case 3 -> {
                LocalDate dtInicio = dtp_inicioFinanceiro.getDate();
                LocalDate dtFim = dtp_fimFinanceiro.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                ArrayList<Integer> anos = new ArrayList<>();
                ArrayList<Double> arrecadado = new ArrayList<>();
                ArrayList<Double> lucro = new ArrayList<>();
                ArrayList<Double> custo = new ArrayList<>();
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call fluxo_caixa_anual(?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtFim));
                    cstmt.setDate(2, Date.valueOf(dtInicio));
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        anos.add(rs.getInt("ano"));
//                        System.out.println(rs.getDate("dt_associada"));
                        arrecadado.add(rs.getDouble("arrecadado"));
//                        System.out.println(rs.getDate("arrecadado"));
                        custo.add(rs.getDouble("custo"));
//                        System.out.println(rs.getDate("custo"));
                        lucro.add(rs.getDouble("lucro"));
//                        System.out.println(rs.getDate("lucro"));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }

                    if (jcmb_formato.getSelectedIndex() == 0) {
                        if (anos.size() > 0) {
                            XYChart xyChart = new XYChartBuilder().width(694).height(340).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
                            xyChart.getStyler().setLegendPosition(LegendPosition.OutsideE);
                            xyChart.getStyler().setDefaultSeriesRenderStyle(XYSeriesRenderStyle.Line);
                            xyChart.getStyler().setLegendVisible(true);
                            xyChart.getStyler().setPlotContentSize(0.8);
                            xyChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
                            xyChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");

                            double[] lucros = new double[] {1};
            //                xyChart.addSeries("Arrecadamento", );
            //                xyChart.addSeries("Custo", );
                            xyChart.addSeries("Arrecadamento", Arrays.asList(anos.toArray(new Integer[1])), Arrays.asList(arrecadado.toArray(new Double[1])));
                            xyChart.addSeries("Custo", Arrays.asList(anos.toArray(new Integer[1])), Arrays.asList(custo.toArray(new Double[1])));
                            xyChart.addSeries("Lucro", Arrays.asList(anos.toArray(new Integer[1])), Arrays.asList(lucro.toArray(new Double[1])));

                            XChartPanel panel = new XChartPanel(xyChart);

                            jpnl_graficoFinanceiro.add(panel);
                            panel.addMouseListener(new Maximizador(panel));
                            panel.setVisible(true);
                        }
                    } else {
                        //Anual
                        jtbl_fluxoFinanceiro.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Ano", "Arrecadado", "Custo", "Lucro"
                            }
                            ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });

                        for (int i = 0 ; i < anos.size(); i++) {
                            ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).addRow(new Object[] {anos.get(i), arrecadado.get(i), custo.get(i), lucro.get(i)});
                        }
                        ((DefaultTableModel)jtbl_fluxoFinanceiro.getModel()).fireTableDataChanged();
                    }
            }
            case 4 -> {
                double arrecadado=0, lucro=0, custo=0;
                LocalDate dtInicio = dtp_inicioFinanceiro.getDate();
                LocalDate dtFim = dtp_fimFinanceiro.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call fluxo_caixa_agregado(?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtFim));
                    cstmt.setDate(2, Date.valueOf(dtInicio));
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        arrecadado = rs.getDouble("arrecadado");
                        custo = rs.getDouble("custo");
                        lucro = rs.getDouble("lucro");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }

                CategoryChart categoryChart = new CategoryChartBuilder().width(600).height(340).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
                categoryChart.getStyler().setLegendPosition(LegendPosition.InsideNW);
                categoryChart.getStyler().setLegendVisible(false);
                categoryChart.getStyler().setPlotContentSize(0.8);
                categoryChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
                categoryChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");

                categoryChart.addSeries("Pedidos", Arrays.asList(new String[] {"Arrecadamento", "Custo", "Lucro"}), Arrays.asList(new Double[] {arrecadado, custo, lucro}));
                XChartPanel panel = new XChartPanel(categoryChart);

                jpnl_graficoFinanceiro.add(panel);
                panel.addMouseListener(new Maximizador(panel));
                panel.setVisible(true);
            }
        }
    }//GEN-LAST:event_jbtn_gerarRelatorioFinanceiroActionPerformed

    private void jcmb_formatoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmb_formatoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            jtbp_financeiro.setSelectedIndex(((JComboBox)evt.getSource()).getSelectedIndex());
        }
    }//GEN-LAST:event_jcmb_formatoItemStateChanged

    private void jcmb_tipoRelatorioFinanceiroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmb_tipoRelatorioFinanceiroItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (((JComboBox)evt.getSource()).getSelectedIndex() == 4) {
                jcmb_formato.setSelectedIndex(0);
                jcmb_formato.setEnabled(false);
            } else {
                jcmb_formato.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jcmb_tipoRelatorioFinanceiroItemStateChanged

    private void jbtn_gerarPerformanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_gerarPerformanceActionPerformed
        jpnl_graficoPerformance.removeAll();
        int escolha = jcmb_tipoRelatorioPerformance.getSelectedIndex();
        jtbp_performance.setSelectedIndex(jcmb_formatoPerformance.getSelectedIndex());
        switch (escolha) {
            case 0 -> {
                int limite = Integer.parseInt((String)jcmb_limitePerformance.getSelectedItem());
                LocalDate dtInicio = dtp_inicioPerformance.getDate();
                LocalDate dtFim = dtp_fimPerformance.getDate();
                Connection conn = null;
                CallableStatement cstmt = null;
                ResultSet rs = null;
                ArrayList<Integer> id_produto = new ArrayList<>();
                ArrayList<String> produto = new ArrayList<>();
                ArrayList<Double> quantidade = new ArrayList<>();
                ArrayList<Double> venda = new ArrayList<>();
                ArrayList<Double> custo = new ArrayList<>();
                try {
                    conn = BD.getConnection();
                    cstmt = conn.prepareCall("call produtos_mais_vendidos(?, ?, ?)");
                    cstmt.setDate(1, Date.valueOf(dtInicio));
                    cstmt.setDate(2, Date.valueOf(dtFim));
                    cstmt.setInt(3, limite);
                    rs = cstmt.executeQuery();

                    while(rs.next()) {
                        id_produto.add(rs.getInt("id_produto"));
                        
                        String nome, abreviacao;
                        nome = rs.getString("nome_produto");
                        abreviacao = rs.getString("abreviacao_unidade");
                        produto.add(String.format("%s (%s)", nome, abreviacao));
                        
                        quantidade.add(Double.valueOf(rs.getInt("soma_quantidade")));
                        venda.add(rs.getDouble("soma_venda"));
                        custo.add(rs.getDouble("soma_custo"));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de busca", JOptionPane.ERROR_MESSAGE);
                }

                // Fechamento da conexão
                try {
                    if (conn != null) {
                        conn.close();
                        if (cstmt != null) {
                            cstmt.close();
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro de fechamento de conexão", JOptionPane.ERROR_MESSAGE);
                }
                

                    if (jcmb_formatoPerformance.getSelectedIndex() == 0) {
                        if ( ! id_produto.isEmpty() ) {
                            CategoryChart categoryChart = new CategoryChartBuilder().width(694).title("Fluxo de caixa no período").xAxisTitle("Métrica").yAxisTitle("R$").build();
//                            categoryChart.getStyler().setLegendPosition(LegendPosition.OutsideE);
                            categoryChart.getStyler().setLegendVisible(false);
                            categoryChart.getStyler().setXAxisLabelRotation(80);
                            
                            categoryChart.getStyler().setPlotContentSize(0.80);
                            categoryChart.getStyler().setYAxisLabelAlignment(AxesChartStyler.TextAlignment.Right);
//                            categoryChart.getStyler().setYAxisDecimalPattern("R$ #,###.##");
                            
//                            for (int j =0; j < id_produto.size(); j++) {
                                categoryChart.addSeries("Produtos mais vendidos", Arrays.asList(produto.toArray(new String[1])), Arrays.asList(quantidade.toArray(new Double[1])));
//                                categoryChart.addSeries("Produtos", produto.subList(0, produto.size()), Arrays.asList(quantidade.toArray(new Double[1])));
//                            }
                            XChartPanel panel = new XChartPanel(categoryChart);

                            jpnl_graficoPerformance.add(panel);
                            panel.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    JFrame maximizado = new JFrame("Maximizado");
                                    maximizado.setContentPane(panel);
                                    maximizado.pack();
                                    maximizado.setVisible(true);
                                }
                            });

                            panel.setVisible(true);
                        }
                    } else {
                        jtbl_fluxoPerformance.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Cód. Produto", "Produto", "Qnt.", "Venda total", "Custo total"
                            }
                            ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });
                        for (int i = 0 ; i < id_produto.size(); i++) {
                            ((DefaultTableModel)jtbl_fluxoPerformance.getModel()).addRow(new Object[] {id_produto.get(i), produto.get(i), quantidade.get(i), venda.get(i), custo.get(i)});
                        }
                        ((DefaultTableModel)jtbl_fluxoPerformance.getModel()).fireTableDataChanged();
                    }
            }
        }
    }//GEN-LAST:event_jbtn_gerarPerformanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_Relatorios2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_Relatorios2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_Relatorios2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_Relatorios2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_Relatorios2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker dtp_fimFinanceiro;
    private com.github.lgooddatepicker.components.DatePicker dtp_fimPerformance;
    private com.github.lgooddatepicker.components.DatePicker dtp_inicioFinanceiro;
    private com.github.lgooddatepicker.components.DatePicker dtp_inicioPerformance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbtn_gerarPerformance;
    private javax.swing.JButton jbtn_gerarRelatorioFinanceiro;
    private javax.swing.JButton jbtn_pesquisarFiltroIntercorrencia;
    private javax.swing.JComboBox<String> jcmb_formato;
    private javax.swing.JComboBox<String> jcmb_formatoPerformance;
    private javax.swing.JComboBox<String> jcmb_limitePerformance;
    private javax.swing.JComboBox<String> jcmb_tipoRelatorioFinanceiro;
    private javax.swing.JComboBox<String> jcmb_tipoRelatorioPerformance;
    private javax.swing.JLabel jlbl_clientes;
    private javax.swing.JLabel jlbl_filtroPeridoIntercorrencia;
    private javax.swing.JLabel jlbl_filtroPeridoIntercorrenciaAte;
    private javax.swing.JLabel jlbl_pedidos;
    private javax.swing.JLabel jlbl_produtos;
    private javax.swing.JLabel jlbl_relatorios;
    private javax.swing.JLabel jpnl_background;
    private javax.swing.JPanel jpnl_graficoFinanceiro;
    private javax.swing.JPanel jpnl_graficoPerformance;
    private javax.swing.JLabel jpnl_img_etiqueta;
    private javax.swing.JPanel jpnl_relatorioFinanceiro;
    private javax.swing.JPanel jpnl_relatorioIntercorrencia;
    private javax.swing.JPanel jpnl_relatorioPerfomanceGeral;
    private javax.swing.JPanel jpnl_sideMenu;
    private javax.swing.JScrollPane jscp_graficoFinanceiro;
    private javax.swing.JScrollPane jscp_graficoFinanceiro1;
    private javax.swing.JScrollPane jscp_tabelaFinanceiro;
    private javax.swing.JScrollPane jscp_tabelaPerformance;
    private javax.swing.JToolBar jtb_linhaBranca;
    private javax.swing.JTable jtbl_fluxoFinanceiro;
    private javax.swing.JTable jtbl_fluxoPerformance;
    private javax.swing.JTable jtbl_relatorioIntercorrencia;
    private javax.swing.JTabbedPane jtbp_financeiro;
    private javax.swing.JTabbedPane jtbp_performance;
    private javax.swing.JTextField jtxtf_periodoFinalIntercorrencia;
    private javax.swing.JTextField jtxtf_periodoInicialIntercorrencia;
    // End of variables declaration//GEN-END:variables
}
